import Foundation


// MARK: 1. Clousures

func handler(text: String, closure: (String) -> ()) {
  let concatenateStrings = text + "SkillFactory"
  closure(concatenateStrings)
}

handler(text: "Hello ") { (text) -> Void in
  print(text + " I like you!")
}


// Example
func checkPersonAge(age: Int) -> Bool {
  age >= 18
}
 
func cigaretteVendingMachine(personAge: Int, closure: (Int) -> Bool) {
  if closure(personAge) {
    print("Thank you for purchasing our products, do not forget that smoking is harmful to your health! Have a nice day.")
  } else {
    print("I apologize! But cigarettes are not sold to people under 18!")
  }
}
 
cigaretteVendingMachine(personAge: 21, closure: checkPersonAge(age:))


// MARK: 2. Abbreviated input parameter names, like $0, etc

//func checkPersonAge(age: Int) -> Bool {
//  age >= 18
//}
 
func cigaretteVendingMachine(personAge: Int, closure: (Int) -> Bool) {
  if closure(personAge) {
    print("Thank you for purchasing our products, do not forget that smoking is harmful to your health! Have a nice day.")
  } else {
    print("I apologize! But cigarettes are not sold to people under 18!")
  }
}
 
cigaretteVendingMachine(personAge: 4, closure: { $0 > 18 })


// MARK: 3. Variable closures

let myClosure: () -> () = {
  print("Hello from my closure")
}
 
myClosure()


// Example
let calculator: (_: Int, _: Int) -> (Int) = {
  $0 + $1
}
 
let result = calculator(4,5)
print(result)


// Example
let accountingReport: (_ name: String, _ age: Int, _ position: String, _ salary: Float) -> (String) = {
  "Employee: \($0), \($1), works as a \($2) with a salary of $ \($3 * 3.14) a month."
}
 
print(accountingReport("Semen", 23, "IOS-developer", 1209.9))


// MARK: 4. Mapping functions

func sumNumbers(_ n1: Int) -> (Int) -> Int {
  return { return n1 + $0 }
}
let closure = sumNumbers(5)
closure(6)

let result = sumNumbers(5)(6)
print(result)


// Example
func concatenateStrings(_ text: String) -> (String) -> (String) -> String {
  return { s1 in
    let concatenateString = text + s1
    return { concatenateString + $0 }
  }
}
 
concatenateStrings("Hi, ")(" now I am knowing ")(" currying")
