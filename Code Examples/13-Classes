import Foundation


// MARK: 1. Классы
// Класс состоит из методов и свойств. Методы отвечают за поведение объекта, а свойства — за состояние.
// Как вы помните, у структур есть встроенный инициализатор, но можно создать и собственный. А вот у класса встроенного инициализатора нет. Поэтому нам нужно будет его написать самостоятельно. Сделать это можно при помощи ключевого слова init.
class City {
    let country: String
    let name: String
    let population: Int
// Так как параметры инициализатора и свойства класса называются одинаково, чтобы разграничить их используется ключевое слово self:
    init(country: String, name: String, population: Int) {
        self.country = country
        self.name = name
        self.population = population
    }
}

let moscow = City(country: "Russia", name: "Moscow", population: 12692466)


// MARK: 2. Отличие классов от структур
class Example {
    var age: Int
    init(age: Int) {
        self.age = age
    }
}

var object = Example(age: 35)

var object2 = object
object2.age = 40


print(object.age, object2.age)


// MARK: 3. Определение и доступ к свойствам
struct Menu {
    let category = "Горячее"
}
 
let menu = Menu()
print("Раздел меню: \(menu.category)")
 
class Restaurant {
    let menu = Menu()
    let name = "Rose"
}
 
let restaurant = Restaurant()
restaurant.menu.category

// MARK: 4. Методы типа (статические методы)
// Статический метод отличается тем, что мы не используем объект, то есть объект не имеет главенства в этой цепочке и теряет свою главную роль. И ключевым здесь будет имя метода или структуры.
class Mnogoetazhka {
    static let height = 30
    static func houseHeight(floorNumbers: Int) -> Int {
        return floorNumbers * height
    }
}
// Обращение идет через класс
Mnogoetazhka.houseHeight(floorNumbers: 30)


// MARK: 5. Методы экземпляра
// Это — это функции, которые принадлежат экземплярам конкретной структуры или класса, и либо дают возможность доступа и изменения свойств экземпляра, либо обеспечивают функциональность экземпляра в соответствии с его целью.
class CashbackCalculator { // Объявили класс
    var startValue = 0 // Сделали рабочее поле
 
// Объявляем методы для экземпляра (не static)
    
    func increaseWithConstant() { // функция увеличивает startValue на фикс. значение (1)
        startValue += 1
    }
    func increase(by value: Int) { // функция увеличивает startValue на фикс. значение (value)
        startValue += value
    }
    func zerofy() { // функция обнуляет startValue
        startValue = 0
    }
}

let example = CashbackCalculator()
example.increase(by: 23)


// MARK: 5. Сабскрипты (subscript)
// Типа функции работает с передачей значений в [] скобках
struct TimesTable {
    let multiplier: Int
    subscript(index: Int) -> Int {
        return multiplier * index // видите? Сабскрипт не будет работать без этого поля
    }
}

let firstNumber = 3
let secondNumber = 6
let threeTimesTable = TimesTable(multiplier: firstNumber) // передать значение в свойство
print("\(firstNumber) умножить на \(secondNumber) будет \(threeTimesTable[6])") // передать значение в сабскрипт


// Другой пример
struct TableCell {
    let height: Int
    subscript(countCell: Int) -> Int {
        return countCell * height
    }
}

let tableCell = TableCell(height: 44)
tableCell[5] // 220
