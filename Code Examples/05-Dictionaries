import Foundation


// MARK: 1. Создание и инициализация
// Для того, чтобы создать пустой словарь определенного типа, можно использовать синтаксис инициализатора:
let dictionary = [String: String]()

// Мы создали пустой словарь. Ключ имеет тип String, значение — String. Создадим словарь с животными:
let animals: [String: String] = ["кот": "Вася", "пёс": "Жора", "попугай": "Кеша"]
animals["кот"]
animals["пёс"]
animals["попугай"]

// Ключ словаря — тип животного, а значение — имя зверя.
// Подобно массивам, вы можете не писать тип словаря, если вы инициализируете его с помощью литерала словаря, чьи ключи и значения имеют соответствующие типы. Инициализация animals может быть записана в более краткой форме:
let animals = ["кот": "Вася", "пёс": "Жора", "попугай": "Кеша"]


// MARK: 2. Доступ и изменение
// Вы можете добавить новый элемент в словарь с помощью синтаксиса индексов. Вспомните пример из одного из предыдущих модулей, где мы рассматривали сабскрипты. Нужно использовать новый ключ в качестве индекса, затем присвоить новое значение.
var animals = ["кот": "Вася", "пёс": "Жора", "попугай": "Кеша"]
animals["лев"] = "Лёва"

// А еще синтаксис индексов можно использовать для изменения значения по ключу:
animals["лев"] = "Леонид"

// Кстати, у словарей тоже есть методы, которые позволяют установить или обновить значение для определенного ключа.
animals.updateValue("Баксик", forKey: "пёс")

// В отличие от индексов, updateValue(forKey:) возвращает старое значение после выполнения обновления, что позволяет проверить состоялось ли обновление или же нет.
// Важно отметить, что этот метод возвращает опциональное значение согласно типу значения словаря. Например, для словаря, который хранит Int значения, метод возвратит Int. Это опциональное значение содержит старое значение для этого ключа, если оно существовало до обновления, либо nil если значение не существовало.
if let oldValue = animals.updateValue("Мурзик", forKey: "кот") {
  print("Старое значение для ключа кот было \(oldValue).")
}
// Выведет "Старое значение для ключа кот было Вася"

// Вы можете использовать синтаксис индексов для удаления пары ключ-значение из словаря путем присвоения nil значению для этого ключа:
animals["лев"] = nil // ["пёс": "Баксик", "попугай": "Кеша", "кот": "Мурзик"]

// И, конечно же, у словарей есть встроенный метод, который позволяет удалить пару ключ-значение: removeValue(forKey:)
// Этот метод удаляет пару ключ-значение, если она существует, и затем возвращает значение, либо возвращает nil если значения не существует. В нашем случае нам вернулось значение “Баксик”.
animals.removeValue(forKey: "пёс") // ["попугай": "Кеша", "кот": "Мурзик"]


// MARK: 3. Итерация по словарю
// Вы можете сделать итерацию по парам ключ-значение в словаре при помощи for-in цикла. Каждое значение словаря возвращается как кортеж (ключ, значение).
let animals = ["кот": "Вася", "пёс": "Жора", "попугай": "Кеша"]

for (animal, name) in animals {
    print(animal, name)
}
// попугай Кеша
// кот Мурзик


// Кстати, кортеж можно присваивать каким-то константам и переменным, если это необходимо. Вы также можете получить коллекцию ключей или значений словаря через обращение к его свойствам keys и values:
let animalTypes = animals.keys // ["попугай", "кот"]
let names = animals.values // ["Кеша", "Мурзик"]

//let animalTypes = [String](animals.keys) // ["попугай", "кот"]
//let names = [String](animals.values) // ["Кеша", "Мурзик"]
