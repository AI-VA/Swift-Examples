import Foundation


// MARK: 1. Класс как ссылочный тип (reference type)
// Типы в Swift делятся на две категории: Типы значений, где каждый экземпляр хранит уникальную копию своих данных, обычно определяемую как структура, перечисление или кортеж. Ссылочные типы, когда экземпляры совместно используют одну копию данных, а тип обычно определяется как класс.

class Human {                   // объявили класс с двумя полями
    var firstName = "Bob"       // дали значения по умолчанию
    var surname = "Dylan"
}
 
let person = Human()          // создали человека (объект класса Human) с данными Bob Dylan
person.firstName = "Mark"    // решили изменить его имя
person.firstName            // Mark // Bob стал Mark

let person2 = person
person2.firstName           // Mark

// Присвоим константу person новой константе person2. Так как это объекты класса, а класс — ссылочный тип, то объекты person и person2 ссылаются на один и тот же объект Human. Фактически в памяти вот что происходит: получается, что у нас два разных имени для одного единственного экземпляра Human. Да, всё верно — имя Mark у person и имя Mark у person2 — это разные имена. А вот объект один, так как person = person2.


// Другой пример
class Navigation {
var value: Int = 1
}
var x = Navigation()
var y = x      // х копируется в у
x.value = 42   // изменяет поле экземпляра, на который ссылается объект x, а также объект у
print("\(x.value), \(y.value)")  // выводит "42, 42" -> значит, поле data в x = 42, в y = 42


// MARK: 2. Структура как тип значения (value type)
// Самая основная отличительная черта типа значения: копирование (присваивание, инициализация и передача аргументов) создает новый экземпляр со своей собственной уникальной копией данных старого

// Мы создали структуру Tutorial, у которой есть свойство difficulty со значением 1.
struct Lesson {
  var difficulty: Int = 1
}
 
// Далее мы объявляем переменную lesson1, которой присваиваем экземпляр структуры.
var lesson1 = Lesson()
 
// Создали переменную lesson2, которой присваиваем значение переменной lesson1.
var lesson2 = lesson1
 
// Затем мы обращаемся к свойству структуры через lesson2.difficulty, изменяя его значение на 2.
lesson2.difficulty = 2
// Lesson(difficulty: 1) Lesson(difficulty: 2)


// MARK: 3. Операторы тождественности

class Human {
    var firstName = "Bob"
    var surname = "Dylan"
}
 
let person = Human()
person.firstName = "Mark"
person.firstName // Mark
 
let person2 = person
person2.firstName // Mark
 
let person3 = Navigation()
 
person === person2 // true
person === person3 // false

// При помощи оператора тождественности мы проверили, ссылаются ли константы на один и тот же экземпляр класса. В первом случае мы получили true, так как person и person2 ссылаются на экземпляр класса Human(). В свою очередь, константа person3 — экземпляр класса Navigation, который ничего общего с экземпляром класса Human не имеет.

person !== person3 // true
